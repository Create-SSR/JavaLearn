package Day013;

/**
 * @author create
 * USER 表示主机名
 * {@code @date} $2023.02.15
 * DATA 为文档创建日期，TIME 为详细创建时间
 */
public class Day013 {
    public static void main(String[] args) {
        /*
            封装：
                作用：
                    1，保证内部结构的安全
                    2，屏蔽复杂，暴露简单

                实现：
                    1，属性私有化；使用private关键字修饰
                    2，对外提供公开的get和set方法，作为操作入口，并且不带static，即实例方法
                        语法结构：[修饰符列表] 返回值类型 方法名（形式参数列表）{
                                }
                        get方法语句结构：
                        public 返回值类型 get+属性名首字母大写（无参）{
                            return XXX变量名；
                        }
                        set方法语句结构：
                        public void set+属性名首字母大写(属性参数){
                            XXX变量名  = 属性参数；
                        }

             带static和不带static的方法调用：
                带有static： 类名.方法名     在同一个类中，类名可以省略
                不带static：称为实例方法（对象方法）实例相关的变量或者方法，都需要先new对象，再通过  引用. 语法调用

                工具类的方法一般都是static静态方法；
                在一个方法体中，直接访问类实例变量，那这个方法一定是实例方法

                静态代码块：
                    语法：static{
                            java语句；
                            Java语句；
                         }
                    注意：
                        1，在类加载时执行，并且只执行一次
                        2，静态代码块在main方法之前执行，执行顺序自上而下；
                        3，存储在方法区
                    作用：
                        1，静态代码块不常用
                        2，静态代码块是sun公司是给程序的特殊时机：类加载时机
                            具体业务：   记录类加载的日志信息，相当于log写在静态代码块中。

                实例语句块：
                    语法：
                        {
                        实例代码块；
                        实例代码块；
                        }
                    注意：1，实例语句块在类加载时没有执行
                         2，构造方法块执行前，自动执行实例语句块一次
                    作用：
                        1，实例语句块也是sun公司为程序准备的特殊时机：对象构建时机

            static关键字：
                1，静态的
                2，所以static修饰的都是类相关的，类级别的
                3，所有static修饰的，都是采用  类名.  语法访问
                4，static 修饰的变量： 静态变量
                    当这个类中的所有对象的某个属性都是一样的，不建议定义为实例变量，浪费存储空间
                    定义为静态变量，只在方法区占用一个空间即可
                5，static 修饰的方法： 静态方法

            变量的分类：
                变量根据声明的位置进行划分：
                    在方法体中声明的变量叫做 局部变量    存储在栈中
                    在方法体外声明的变量叫做：成员变量
                成员变量又可以分为：
                    实例变量     存储在堆内存中
                    静态变量:    存储在方法区中
                        在类加载时初始化，不需要new对象，可以用 类名.变量名 和 引用.变量名 进行访问,不建议用 引用.变量名访问。
                        静态变量的空间就在方法区存储了
                        并且静态相关不会出现空指针异常
                        空指针异常

                   类{
                        实例相关的都需要new 对象，通过"引用."访问
                        实例变量；
                        实例方法；
                        静态相关的需要采用"类名."访问，也可以采用"引用."访问，只不过不建议
                        静态变量；
                        静态方法；
                   }

            this :关键字
                1，this是一个关键字，全部小写
                2，一个对象一个this，this是一个变量，一个引用，this保存当前对象的内存地址，指向自身，
                    this存储在堆内存中对象的内部
                3， this只能使用在实例方法中，谁调用这个实例方法，谁就是this，this代表当前对象
                4，实例方法中this大部分情况可以省略不写
                5, 不能省略的情况：实例方法和构造方法中区分局部变量和实例变量

            this()还可以用在构造方法中
                新语法：通过当前的构造方法去调用本类中另一个构造方法
                    this(实际参数列表值-也就是值)；
                作用：代码复用
                注意：对于this（）;的调用，只能出现在构造方法中的第一行；只能出现一次

         */
    }
}
